<?php
/**
 * Problems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AUDITORIA
 *
 * # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Problems Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Problems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Problems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'extinguisher' => 'bool',
'hodometer' => 'bool',
'seal' => 'bool',
'fl_alert' => 'bool',
'fr_alert' => 'bool',
'rl_alert' => 'bool',
'rr_alert' => 'bool',
'fl_headlight' => 'bool',
'fr_headlight' => 'bool',
'rl_headlight' => 'bool',
'rr_headlight' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'extinguisher' => null,
'hodometer' => null,
'seal' => null,
'fl_alert' => null,
'fr_alert' => null,
'rl_alert' => null,
'rr_alert' => null,
'fl_headlight' => null,
'fr_headlight' => null,
'rl_headlight' => null,
'rr_headlight' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extinguisher' => 'extinguisher',
'hodometer' => 'hodometer',
'seal' => 'seal',
'fl_alert' => 'fl_alert',
'fr_alert' => 'fr_alert',
'rl_alert' => 'rl_alert',
'rr_alert' => 'rr_alert',
'fl_headlight' => 'fl_headlight',
'fr_headlight' => 'fr_headlight',
'rl_headlight' => 'rl_headlight',
'rr_headlight' => 'rr_headlight'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extinguisher' => 'setExtinguisher',
'hodometer' => 'setHodometer',
'seal' => 'setSeal',
'fl_alert' => 'setFlAlert',
'fr_alert' => 'setFrAlert',
'rl_alert' => 'setRlAlert',
'rr_alert' => 'setRrAlert',
'fl_headlight' => 'setFlHeadlight',
'fr_headlight' => 'setFrHeadlight',
'rl_headlight' => 'setRlHeadlight',
'rr_headlight' => 'setRrHeadlight'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extinguisher' => 'getExtinguisher',
'hodometer' => 'getHodometer',
'seal' => 'getSeal',
'fl_alert' => 'getFlAlert',
'fr_alert' => 'getFrAlert',
'rl_alert' => 'getRlAlert',
'rr_alert' => 'getRrAlert',
'fl_headlight' => 'getFlHeadlight',
'fr_headlight' => 'getFrHeadlight',
'rl_headlight' => 'getRlHeadlight',
'rr_headlight' => 'getRrHeadlight'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extinguisher'] = isset($data['extinguisher']) ? $data['extinguisher'] : null;
        $this->container['hodometer'] = isset($data['hodometer']) ? $data['hodometer'] : null;
        $this->container['seal'] = isset($data['seal']) ? $data['seal'] : null;
        $this->container['fl_alert'] = isset($data['fl_alert']) ? $data['fl_alert'] : null;
        $this->container['fr_alert'] = isset($data['fr_alert']) ? $data['fr_alert'] : null;
        $this->container['rl_alert'] = isset($data['rl_alert']) ? $data['rl_alert'] : null;
        $this->container['rr_alert'] = isset($data['rr_alert']) ? $data['rr_alert'] : null;
        $this->container['fl_headlight'] = isset($data['fl_headlight']) ? $data['fl_headlight'] : null;
        $this->container['fr_headlight'] = isset($data['fr_headlight']) ? $data['fr_headlight'] : null;
        $this->container['rl_headlight'] = isset($data['rl_headlight']) ? $data['rl_headlight'] : null;
        $this->container['rr_headlight'] = isset($data['rr_headlight']) ? $data['rr_headlight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['extinguisher'] === null) {
            $invalidProperties[] = "'extinguisher' can't be null";
        }
        if ($this->container['hodometer'] === null) {
            $invalidProperties[] = "'hodometer' can't be null";
        }
        if ($this->container['seal'] === null) {
            $invalidProperties[] = "'seal' can't be null";
        }
        if ($this->container['fl_alert'] === null) {
            $invalidProperties[] = "'fl_alert' can't be null";
        }
        if ($this->container['fr_alert'] === null) {
            $invalidProperties[] = "'fr_alert' can't be null";
        }
        if ($this->container['rl_alert'] === null) {
            $invalidProperties[] = "'rl_alert' can't be null";
        }
        if ($this->container['rr_alert'] === null) {
            $invalidProperties[] = "'rr_alert' can't be null";
        }
        if ($this->container['fl_headlight'] === null) {
            $invalidProperties[] = "'fl_headlight' can't be null";
        }
        if ($this->container['fr_headlight'] === null) {
            $invalidProperties[] = "'fr_headlight' can't be null";
        }
        if ($this->container['rl_headlight'] === null) {
            $invalidProperties[] = "'rl_headlight' can't be null";
        }
        if ($this->container['rr_headlight'] === null) {
            $invalidProperties[] = "'rr_headlight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extinguisher
     *
     * @return bool
     */
    public function getExtinguisher()
    {
        return $this->container['extinguisher'];
    }

    /**
     * Sets extinguisher
     *
     * @param bool $extinguisher Informa se o extintor está com problemas.
     *
     * @return $this
     */
    public function setExtinguisher($extinguisher)
    {
        $this->container['extinguisher'] = $extinguisher;

        return $this;
    }

    /**
     * Gets hodometer
     *
     * @return bool
     */
    public function getHodometer()
    {
        return $this->container['hodometer'];
    }

    /**
     * Sets hodometer
     *
     * @param bool $hodometer Informa se o hodômetro está com problemas.
     *
     * @return $this
     */
    public function setHodometer($hodometer)
    {
        $this->container['hodometer'] = $hodometer;

        return $this;
    }

    /**
     * Gets seal
     *
     * @return bool
     */
    public function getSeal()
    {
        return $this->container['seal'];
    }

    /**
     * Sets seal
     *
     * @param bool $seal Informa se o lacre está com problemas.
     *
     * @return $this
     */
    public function setSeal($seal)
    {
        $this->container['seal'] = $seal;

        return $this;
    }

    /**
     * Gets fl_alert
     *
     * @return bool
     */
    public function getFlAlert()
    {
        return $this->container['fl_alert'];
    }

    /**
     * Sets fl_alert
     *
     * @param bool $fl_alert Informa se o alerta frontal esquerdo está com problemas.
     *
     * @return $this
     */
    public function setFlAlert($fl_alert)
    {
        $this->container['fl_alert'] = $fl_alert;

        return $this;
    }

    /**
     * Gets fr_alert
     *
     * @return bool
     */
    public function getFrAlert()
    {
        return $this->container['fr_alert'];
    }

    /**
     * Sets fr_alert
     *
     * @param bool $fr_alert Informa se o alerta frontal direito está com problemas.
     *
     * @return $this
     */
    public function setFrAlert($fr_alert)
    {
        $this->container['fr_alert'] = $fr_alert;

        return $this;
    }

    /**
     * Gets rl_alert
     *
     * @return bool
     */
    public function getRlAlert()
    {
        return $this->container['rl_alert'];
    }

    /**
     * Sets rl_alert
     *
     * @param bool $rl_alert Informa se o alerta traseiro esquerdo está com problemas.
     *
     * @return $this
     */
    public function setRlAlert($rl_alert)
    {
        $this->container['rl_alert'] = $rl_alert;

        return $this;
    }

    /**
     * Gets rr_alert
     *
     * @return bool
     */
    public function getRrAlert()
    {
        return $this->container['rr_alert'];
    }

    /**
     * Sets rr_alert
     *
     * @param bool $rr_alert Informa se o alerta traseiro direito está com problemas.
     *
     * @return $this
     */
    public function setRrAlert($rr_alert)
    {
        $this->container['rr_alert'] = $rr_alert;

        return $this;
    }

    /**
     * Gets fl_headlight
     *
     * @return bool
     */
    public function getFlHeadlight()
    {
        return $this->container['fl_headlight'];
    }

    /**
     * Sets fl_headlight
     *
     * @param bool $fl_headlight Informa se o farol frontal esquerdo está com problemas.
     *
     * @return $this
     */
    public function setFlHeadlight($fl_headlight)
    {
        $this->container['fl_headlight'] = $fl_headlight;

        return $this;
    }

    /**
     * Gets fr_headlight
     *
     * @return bool
     */
    public function getFrHeadlight()
    {
        return $this->container['fr_headlight'];
    }

    /**
     * Sets fr_headlight
     *
     * @param bool $fr_headlight Informa se o farol frontal direito está com problemas.
     *
     * @return $this
     */
    public function setFrHeadlight($fr_headlight)
    {
        $this->container['fr_headlight'] = $fr_headlight;

        return $this;
    }

    /**
     * Gets rl_headlight
     *
     * @return bool
     */
    public function getRlHeadlight()
    {
        return $this->container['rl_headlight'];
    }

    /**
     * Sets rl_headlight
     *
     * @param bool $rl_headlight Informa se o farol traseiro esquerdo está com problemas.
     *
     * @return $this
     */
    public function setRlHeadlight($rl_headlight)
    {
        $this->container['rl_headlight'] = $rl_headlight;

        return $this;
    }

    /**
     * Gets rr_headlight
     *
     * @return bool
     */
    public function getRrHeadlight()
    {
        return $this->container['rr_headlight'];
    }

    /**
     * Sets rr_headlight
     *
     * @param bool $rr_headlight Informa se o farol traseiro direito está com problemas.
     *
     * @return $this
     */
    public function setRrHeadlight($rr_headlight)
    {
        $this->container['rr_headlight'] = $rr_headlight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
