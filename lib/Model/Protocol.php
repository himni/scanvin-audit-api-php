<?php
/**
 * Protocol
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AUDITORIA
 *
 * # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Protocol Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Protocol implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Protocol';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
'car_engine' => 'string',
'car_plate' => 'string',
'car_state' => 'string',
'car_vin' => 'string',
'car_renavam' => 'string',
'engine_accepted' => 'bool',
'vin_accepted' => 'bool',
'surveyor_email' => 'string',
'pictures' => '\Swagger\Client\Model\Picture1[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
'car_engine' => null,
'car_plate' => null,
'car_state' => null,
'car_vin' => null,
'car_renavam' => null,
'engine_accepted' => null,
'vin_accepted' => null,
'surveyor_email' => null,
'pictures' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
'car_engine' => 'car_engine',
'car_plate' => 'car_plate',
'car_state' => 'car_state',
'car_vin' => 'car_vin',
'car_renavam' => 'car_renavam',
'engine_accepted' => 'engine_accepted',
'vin_accepted' => 'vin_accepted',
'surveyor_email' => 'surveyor_email',
'pictures' => 'pictures'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
'car_engine' => 'setCarEngine',
'car_plate' => 'setCarPlate',
'car_state' => 'setCarState',
'car_vin' => 'setCarVin',
'car_renavam' => 'setCarRenavam',
'engine_accepted' => 'setEngineAccepted',
'vin_accepted' => 'setVinAccepted',
'surveyor_email' => 'setSurveyorEmail',
'pictures' => 'setPictures'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
'car_engine' => 'getCarEngine',
'car_plate' => 'getCarPlate',
'car_state' => 'getCarState',
'car_vin' => 'getCarVin',
'car_renavam' => 'getCarRenavam',
'engine_accepted' => 'getEngineAccepted',
'vin_accepted' => 'getVinAccepted',
'surveyor_email' => 'getSurveyorEmail',
'pictures' => 'getPictures'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['car_engine'] = isset($data['car_engine']) ? $data['car_engine'] : null;
        $this->container['car_plate'] = isset($data['car_plate']) ? $data['car_plate'] : null;
        $this->container['car_state'] = isset($data['car_state']) ? $data['car_state'] : null;
        $this->container['car_vin'] = isset($data['car_vin']) ? $data['car_vin'] : null;
        $this->container['car_renavam'] = isset($data['car_renavam']) ? $data['car_renavam'] : null;
        $this->container['engine_accepted'] = isset($data['engine_accepted']) ? $data['engine_accepted'] : null;
        $this->container['vin_accepted'] = isset($data['vin_accepted']) ? $data['vin_accepted'] : null;
        $this->container['surveyor_email'] = isset($data['surveyor_email']) ? $data['surveyor_email'] : null;
        $this->container['pictures'] = isset($data['pictures']) ? $data['pictures'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['car_plate'] === null) {
            $invalidProperties[] = "'car_plate' can't be null";
        }
        if ($this->container['car_state'] === null) {
            $invalidProperties[] = "'car_state' can't be null";
        }
        if ($this->container['car_vin'] === null) {
            $invalidProperties[] = "'car_vin' can't be null";
        }
        if ($this->container['car_renavam'] === null) {
            $invalidProperties[] = "'car_renavam' can't be null";
        }
        if ($this->container['engine_accepted'] === null) {
            $invalidProperties[] = "'engine_accepted' can't be null";
        }
        if ($this->container['vin_accepted'] === null) {
            $invalidProperties[] = "'vin_accepted' can't be null";
        }
        if ($this->container['surveyor_email'] === null) {
            $invalidProperties[] = "'surveyor_email' can't be null";
        }
        if ($this->container['pictures'] === null) {
            $invalidProperties[] = "'pictures' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Número ou ID do protocolo fornecidos pelo cliente.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets car_engine
     *
     * @return string
     */
    public function getCarEngine()
    {
        return $this->container['car_engine'];
    }

    /**
     * Sets car_engine
     *
     * @param string $car_engine Número do motor.
     *
     * @return $this
     */
    public function setCarEngine($car_engine)
    {
        $this->container['car_engine'] = $car_engine;

        return $this;
    }

    /**
     * Gets car_plate
     *
     * @return string
     */
    public function getCarPlate()
    {
        return $this->container['car_plate'];
    }

    /**
     * Sets car_plate
     *
     * @param string $car_plate Número da placa de identificação veicular.
     *
     * @return $this
     */
    public function setCarPlate($car_plate)
    {
        $this->container['car_plate'] = $car_plate;

        return $this;
    }

    /**
     * Gets car_state
     *
     * @return string
     */
    public function getCarState()
    {
        return $this->container['car_state'];
    }

    /**
     * Sets car_state
     *
     * @param string $car_state UF da placa de identificação veicular.
     *
     * @return $this
     */
    public function setCarState($car_state)
    {
        $this->container['car_state'] = $car_state;

        return $this;
    }

    /**
     * Gets car_vin
     *
     * @return string
     */
    public function getCarVin()
    {
        return $this->container['car_vin'];
    }

    /**
     * Sets car_vin
     *
     * @param string $car_vin Número de chassi.
     *
     * @return $this
     */
    public function setCarVin($car_vin)
    {
        $this->container['car_vin'] = $car_vin;

        return $this;
    }

    /**
     * Gets car_renavam
     *
     * @return string
     */
    public function getCarRenavam()
    {
        return $this->container['car_renavam'];
    }

    /**
     * Sets car_renavam
     *
     * @param string $car_renavam Número do RENAVAM.
     *
     * @return $this
     */
    public function setCarRenavam($car_renavam)
    {
        $this->container['car_renavam'] = $car_renavam;

        return $this;
    }

    /**
     * Gets engine_accepted
     *
     * @return bool
     */
    public function getEngineAccepted()
    {
        return $this->container['engine_accepted'];
    }

    /**
     * Sets engine_accepted
     *
     * @param bool $engine_accepted Informa se o vistoriador aprovou ou reprovou a numeração do motor.
     *
     * @return $this
     */
    public function setEngineAccepted($engine_accepted)
    {
        $this->container['engine_accepted'] = $engine_accepted;

        return $this;
    }

    /**
     * Gets vin_accepted
     *
     * @return bool
     */
    public function getVinAccepted()
    {
        return $this->container['vin_accepted'];
    }

    /**
     * Sets vin_accepted
     *
     * @param bool $vin_accepted Informa se o vistoriador aprovou ou reprovação a numeração do chassi.
     *
     * @return $this
     */
    public function setVinAccepted($vin_accepted)
    {
        $this->container['vin_accepted'] = $vin_accepted;

        return $this;
    }

    /**
     * Gets surveyor_email
     *
     * @return string
     */
    public function getSurveyorEmail()
    {
        return $this->container['surveyor_email'];
    }

    /**
     * Sets surveyor_email
     *
     * @param string $surveyor_email E-mail do vistoriador.
     *
     * @return $this
     */
    public function setSurveyorEmail($surveyor_email)
    {
        $this->container['surveyor_email'] = $surveyor_email;

        return $this;
    }

    /**
     * Gets pictures
     *
     * @return \Swagger\Client\Model\Picture1[]
     */
    public function getPictures()
    {
        return $this->container['pictures'];
    }

    /**
     * Sets pictures
     *
     * @param \Swagger\Client\Model\Picture1[] $pictures Imagens do veículo.
     *
     * @return $this
     */
    public function setPictures($pictures)
    {
        $this->container['pictures'] = $pictures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
